import {
  Box,
  Button,
  Container,
  Heading,
  SimpleGrid,
  Text,
  useDisclosure
} from "@chakra-ui/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useContext, useEffect } from "react";
import { ChevronLeft as ChevronLeftIcon } from "react-feather";
import { v4 as uuid4 } from "uuid";
import CustomModal from "../components/CustomModal";
import FormField from "../components/FormField";
import PageLoader from "../components/pageLoader";
import DataContext from "../contexts/dataContext";
import FormContext from "../contexts/formContext";

export default function SelectBuilding() {
  const router = useRouter();
  const { findEntity, recommendRooms, addMeeting, loading } =
    useContext(DataContext);
  const {
    title,
    date,
    startTime,
    endTime,
    buildingID,
    roomID,
    mounting,
    setRoomID
  } = useContext(FormContext);
  const { isOpen, onOpen, onClose } = useDisclosure();

  const keys = [
    "title",
    "date",
    "startTime",
    "endTime",
    "buildingID",
    "roomID"
  ];

  const getBuildingName = () => {
    const build = findEntity("Buildings", buildingID);
    return !!build ? build.name : "";
  };

  const getRoomName = () => {
    const room = findEntity("MeetingRooms", roomID);
    return !!room ? room.name : "";
  };

  const handleRecommendRooms = () => {
    const temp = {
      title,
      date,
      startTime,
      endTime,
      buildingID,
      roomID
    };
    const filters = keys.reduce(
      (obj, cur) => ({ ...obj, [cur]: temp[cur] }),
      {}
    );
    console.log(recommendRooms(filters));
    return recommendRooms(filters);
  };

  const handleRoomId = id => {
    setRoomID(id);
    onClose();
  };

  const handleBackButton = () => router.back();

  const handleSubmit = e => {
    e.preventDefault();
    addMeeting({
      id: uuid4(),
      title,
      date,
      startTime,
      endTime,
      buildingID,
      roomID
    });
  };

  useEffect(() => {
    if (
      !mounting &&
      (!title || !date || !startTime || !endTime || !buildingID)
    ) {
      localStorage.clear();
      router.replace("/select-time");
    }
  }, [mounting, title, date, startTime, endTime, buildingID, router]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {loading && mounting ? (
          <PageLoader />
        ) : (
          <form onSubmit={handleSubmit}>
            <Container
              px={[4, 8, 8, 16]}
              py={[8, 8, 16]}
              display="flex"
              flexDir="column"
              justifyContent="space-between"
              maxW="container.lg"
              minH="100vh"
            >
              <Box>
                <Heading>Select Room</Heading>
                <Text mt="2" color="gray.700">
                  Please select the meeting room from the available buildings.
                </Text>
                <Box mt="8">
                  <Text fontSize="xl" fontWeight="semibold">
                    {title}
                  </Text>
                  <Text>{`Location: ${getBuildingName()}`}</Text>
                  <Text fontSize="sm" color="gray.500">
                    {`${date} - ${startTime} to ${endTime}`}
                  </Text>
                </Box>
                <Box mt="8">
                  <SimpleGrid mb="8" columns={[1, 1, 2]} gap="4">
                    <FormField
                      required
                      w="full"
                      py="2"
                      cursor="pointer"
                      variant="unstyled"
                      placeholder="Select Meeting Room"
                      label="Meeting Room"
                      value={getRoomName()}
                      onClick={onOpen}
                      onChange={() => {}}
                    />
                    <CustomModal
                      isOpen={isOpen}
                      onClose={onClose}
                      label="Select Room"
                    >
                      {handleRecommendRooms().map(room => (
                        <Button
                          w="100%"
                          py="3"
                          px="4"
                          my="1"
                          h="max-content"
                          variant="ghost"
                          key={room.id}
                          onClick={() => handleRoomId(room.id)}
                        >
                          <Box w="full" textAlign="left">
                            <Text>
                              {room.name} (Floor {room.floor})
                            </Text>
                            <Text
                              mt="1"
                              fontSize="sm"
                              fontWeight="normal"
                              color="gray.500"
                            >
                              {`Slots Booked: ${room.meetings.length}`}
                            </Text>
                          </Box>
                        </Button>
                      ))}
                    </CustomModal>
                  </SimpleGrid>
                </Box>
              </Box>
              <Box
                mt="12"
                display="flex"
                flexDir="row"
                alignItems="center"
                justifyContent="space-between"
              >
                <Button
                  variant="ghost"
                  colorScheme="gray"
                  color="gray.500"
                  leftIcon={<ChevronLeftIcon size={20} />}
                  onClick={() => handleBackButton()}
                >
                  Back
                </Button>
                <Button type="submit" variant="solid" colorScheme="blue">
                  Save Meeting
                </Button>
              </Box>
            </Container>
          </form>
        )}
      </main>
    </>
  );
}
